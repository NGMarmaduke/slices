slices.AssetResizeView = slices.AssetThumbView.extend({

  tagName: 'li',
  className: 'resizable asset-library-item',

  template: Handlebars.compile(
    '<img src="{{src}}" alt="{{name}}">'+
    '<input type="hidden" class="x">'+
    '<input type="hidden" class="y">'+
    '<input type="hidden" class="width">'+
    '<input type="hidden" class="height">'
  ),

  initialize: function() {
    _.bindAll(this);
    this.$el.append('<div class="asset-details">');
    $('.post-size input').change(this.attatchCropTool)
    this.model.bind('change', this.attatchNewCropTool);
    this.model.bind('destroying', this.whenModelIsDestroying);
  },

  render: function() {
    this.$el.find('.asset-details').html(this.template(this));
    return this;
  },
  attatchCropTool: function() {
    img = this.$el.find('img');
    if(this.model.get('crop_width') == null || this.model.get('crop_width') == 0) {
      bounding_box = [ $(img).width(), 0, 0, 0 ]
    } else {
      crop_ratio = this.getActualCropRatio();
      bounding_box = [
        (this.model.get('crop_x')/crop_ratio),
        (this.model.get('crop_y')/crop_ratio),
        (this.model.get('crop_x')/crop_ratio) + (this.model.get('crop_width')/crop_ratio),
        (this.model.get('crop_y')/crop_ratio) + (this.model.get('crop_height')/crop_ratio)
      ]
    }
    switch ($('.post-size input:checked').val()) {
      case "tall":
        ratio = 2/3;
        break;
      case "wide":
        ratio = 3/2;
        break;
      case "competition":
        ratio = 16/9;
        break;
      case "competition-tall":
        ratio = 2/3;
        break;
      case "normal":
      case "large":
        ratio = 1;
        break;
      default:
        ratio = 1;
        break;
    }
    if (typeof img.data('Jcrop') !== "undefined" && img.data('Jcrop') !== null) {
      img.data('Jcrop').setOptions({
        aspectRatio: ratio
      });
    } else {
      img.Jcrop({
        setSelect: bounding_box,
        aspectRatio: ratio,
        onSelect: this.update_model_resize,
        onChange: this.update_model_resize
      });
    }
  },
  update_model_resize: function(c){
    crop_ratio = this.getActualCropRatio();
    x = c.x * crop_ratio;
    y = c.y * crop_ratio;
    width = c.w * crop_ratio
    height = c.h * crop_ratio
    attatchment = $('li.resizable-attatchment').data('model')
    this.model.attributes['crop_x'] = x;
    this.model.attributes['crop_y'] = y;
    this.model.attributes['crop_width'] = width;
    this.model.attributes['crop_height'] = height;
    attatchment.set('crop_x', x);
    attatchment.set('crop_y', y);
    attatchment.set('crop_width', width);
    attatchment.set('crop_height', height);
    slices.model.Page.changed = true;
    $('#slices-form').trigger('change');
  },
  getActualCropRatio: function(){
    screenImage = this.$el.find('img');
    if(screenImage[0].naturalWidth==0) {
      return this.model.get('file_dimensions').original.split('x')[0] / screenImage.width()
    } else {
      return screenImage[0].naturalWidth / screenImage.width()
    }
  },
  src: function() {
    return this.model.get('original_url')
        || '<%= asset_path 'slices/icon_generic_file.png' %>';
  },
  name: function() {
    return this.model.get('name');
  },
  url: function() {
    return this.model.url();
  },
  attatchNewCropTool: function() {
    this.whenModelChanges();
    this.attatchCropTool();
  }
})
